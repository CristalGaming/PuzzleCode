
/*
 *    MCreator note: This file will be REGENERATED on each build.
 */
package net.mcreator.puzzle_code.init;

import net.minecraftforge.registries.RegistryObject;
import net.minecraftforge.registries.DeferredRegister;

import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.network.chat.Component;
import net.minecraft.core.registries.Registries;

import net.mcreator.puzzle_code.PuzzleCodeMod;

public class PuzzleCodeModTabs {
	public static final DeferredRegister<CreativeModeTab> REGISTRY = DeferredRegister.create(Registries.CREATIVE_MODE_TAB, PuzzleCodeMod.MODID);
	public static final RegistryObject<CreativeModeTab> PUZZLE_CODE_TAB = REGISTRY.register("puzzle_code_tab",
			() -> CreativeModeTab.builder().title(Component.translatable("item_group.puzzle_code.puzzle_code_tab")).icon(() -> new ItemStack(PuzzleCodeModBlocks.NORMAL_BLOCK.get())).displayItems((parameters, tabData) -> {
				tabData.accept(PuzzleCodeModItems.CREATIVE_SETTINGS.get());
				tabData.accept(PuzzleCodeModItems.GUI_SET.get());
				tabData.accept(PuzzleCodeModItems.BLOCK_TOGGLER.get());
				tabData.accept(PuzzleCodeModItems.POSITION_SET.get());
				tabData.accept(PuzzleCodeModItems.NBT_VERIFIER.get());
				tabData.accept(PuzzleCodeModItems.BLOCK_ROTATOR.get());
				tabData.accept(PuzzleCodeModBlocks.ITEM_CONFIGURATOR.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHECKPOINT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHECKPOINT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHECKPOINT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CHECKPOINT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CHECKPOINT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CHECKPOINT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.CHECKPOINT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.EFFECT_REMOVER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_EFFECT_REMOVER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.EFFECT_REMOVER_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.NORMAL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NORMAL_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NORMAL_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.NORMAL_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.JUMP_BOOST_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.JUMP_BOOST_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.JUMP_BOOST_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_JUMP_BOOST_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_JUMP_BOOST_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_JUMP_BOOST_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.JUMP_BOOST_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.SPEED_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SPEED_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SPEED_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SPEED_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SPEED_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SPEED_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.SPEED_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.SLOWNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SLOWNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SLOWNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOWNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOWNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOWNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.SLOWNESS_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.POISON_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.POISON_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.POISON_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_POISON_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_POISON_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_POISON_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.POISON_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.WITHER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WITHER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WITHER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WITHER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WITHER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WITHER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.WITHER_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.REGENERATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REGENERATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REGENERATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_REGENERATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_REGENERATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_REGENERATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.REGENERATION_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.RESISTANCE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RESISTANCE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RESISTANCE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_RESISTANCE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_RESISTANCE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_RESISTANCE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.RESISTANCE_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.STRENGTH_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.STRENGTH_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.STRENGTH_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_STRENGTH_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_STRENGTH_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_STRENGTH_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.STRENGTH_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.WEAKNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WEAKNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WEAKNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WEAKNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WEAKNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WEAKNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.WEAKNESS_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.HASTE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HASTE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HASTE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HASTE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HASTE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HASTE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.HASTE_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.MINING_FATIGUE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MINING_FATIGUE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MINING_FATIGUE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_MINING_FATIGUE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_MINING_FATIGUE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_MINING_FATIGUE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.MINING_FATIGUE_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.LEVITATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEVITATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEVITATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LEVITATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LEVITATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LEVITATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.LEVITATION_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.SLOW_FALLING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SLOW_FALLING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SLOW_FALLING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOW_FALLING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOW_FALLING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SLOW_FALLING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.SLOW_FALLING_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.INVISIBILITY_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INVISIBILITY_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INVISIBILITY_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INVISIBILITY_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INVISIBILITY_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INVISIBILITY_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.INVISIBILITY_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.GLOWING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.GLOWING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.GLOWING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_GLOWING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_GLOWING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_GLOWING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.GLOWING_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.FIRE_RESISTANCE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FIRE_RESISTANCE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FIRE_RESISTANCE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_RESISTANCE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_RESISTANCE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_RESISTANCE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.FIRE_RESISTANCE_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.WATER_BREATHING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WATER_BREATHING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WATER_BREATHING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WATER_BREATHING_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WATER_BREATHING_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_WATER_BREATHING_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.WATER_BREATHING_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.DOLPHINS_GRACE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DOLPHINS_GRACE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DOLPHINS_GRACE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DOLPHINS_GRACE_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DOLPHINS_GRACE_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DOLPHINS_GRACE_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.DOLPHINS_GRACE_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.CONDUIT_POWER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CONDUIT_POWER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CONDUIT_POWER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CONDUIT_POWER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CONDUIT_POWER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CONDUIT_POWER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.CONDUIT_POWER_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.BLINDNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLINDNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLINDNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_BLINDNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_BLINDNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_BLINDNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.BLINDNESS_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.NAUSEA_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NAUSEA_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NAUSEA_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NAUSEA_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NAUSEA_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NAUSEA_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.NAUSEA_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.DARKNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DARKNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DARKNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DARKNESS_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DARKNESS_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DARKNESS_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.DARKNESS_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.NIGHT_VISION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NIGHT_VISION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NIGHT_VISION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NIGHT_VISION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NIGHT_VISION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NIGHT_VISION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.NIGHT_VISION_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.SATURATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SATURATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SATURATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SATURATION_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SATURATION_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_SATURATION_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.SATURATION_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.HUNGER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HUNGER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HUNGER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HUNGER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HUNGER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_HUNGER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.HUNGER_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_YELLOW_SWITCHER_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_YELLOW_SWITCHER_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_YELLOW_SWITCHER_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.YELLOW_SWICHER_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.LUCK_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LUCK_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LUCK_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LUCK_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LUCK_EFFEST_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_LUCK_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.LUCK_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.UNLUCK_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNLUCK_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNLUCK_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_UNLUCK_EFFECT_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_UNLUCK_EFFECT_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_UNLUCK_EFFECT_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.UNLUCK_EFFECT_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.CATAPULTER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CATAPULTER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CATAPULTER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CATAPULTER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CATAPULTER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_CATAPULTER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.CATAPULTER_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.DAY_TIME_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_DAY_TIME_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NIGHT_TIME_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_NIGHT_TIME_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ADVANCED_TIME_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BOUNCY_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PATH_MOVING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PLACER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ADVANCED_PLACER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REPLACER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLOCK_ENTITY_PLACER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHUNK_LOADER.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MOVING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INVENTORY_REMOVER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INVENTORY_REMOVER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.INVENTORY_REMOVER_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.INVENTORY_REPLACER.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ENTITY_TELEPORTER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HEALTH_CHANGER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DAMAGE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.DAMAGE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.KILL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.KILL_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.KILL_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_KILL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_KILL_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_KILL_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.KILL_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.FIRE_DAMAGE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.FIRE_DAMAGE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.FIRE_KILLER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FIRE_KILLER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FIRE_KILLER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_KILLER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_KILLER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_FIRE_KILLER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.FIRE_KILLER_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.HEALTH_REGENERATION_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.HEALTH_REGENERATION_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HEALTH_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HEALTH_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HEALTH_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HEALTH_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HEALTH_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HEALTH_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModItems.INSTANT_HEALTH_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.HUNGER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HUNGER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HUNGER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_HUNGER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HUNGER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HUNGER_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_HUNGER_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SATURATION_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_SATURATION_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_SATURATION_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.INSTANT_SATURATION_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_SATURATION_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_SATURATION_STAIRS.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IN_INSTANT_SATURATION_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RED_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RED_SWITCHING_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RED_SWITCHING_SLAB_OFF.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RED_KILL_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLUE_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLUE_SWITCING_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLUE_SWITCHING_SLAB_OFF.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLUE_KILL_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SWITCHING_BLOCK_RED.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RED_SETTER_SWITCHER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLUE_SETTER_SWITCHER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.RED_OR_BLUE_SWITCHING_ITEM.get());
				tabData.accept(PuzzleCodeModItems.RED_SWITCHING_ITEM.get());
				tabData.accept(PuzzleCodeModItems.BLUE_SWITCHING_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_CHAIN_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_IMITATOR_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHING_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_SWITCHING_SLAB_OFF.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YELLOW_KILL_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_YELLOW_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_YELLOW_SWITCHING_SLAB.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_YELLOW_SWITCHING_SLAB_OFF.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_YELLOW_KILL_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NEAR_ENTITY_YELLOW_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_NEAR_ENTITY_YELLOW_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TIMED_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_TIMED_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.WALKING_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CLICKING_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NEAR_ENTITY_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REVERSE_NEAR_ENTITY_SWITCHING_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ENTITY_DETECTOR.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FAKE_BLOCK.get().asItem());
			}).withSearchBar().build());
	public static final RegistryObject<CreativeModeTab> CODE_BLOCKS_TAB = REGISTRY.register("code_blocks_tab",
			() -> CreativeModeTab.builder().title(Component.translatable("item_group.puzzle_code.code_blocks_tab")).icon(() -> new ItemStack(PuzzleCodeModBlocks.NUMBER_CODE_BLOCK.get())).displayItems((parameters, tabData) -> {
				tabData.accept(PuzzleCodeModBlocks.A_BLOCK_IS_BROKEN_GLOBAL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.A_BLOCK_IS_PLACED_GLOBAL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.A_BLOCK_IS_RIGHT_CLICKED_GLOBAL_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PI_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.E_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RANDOMIZER_INTEGER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RANDOMIZER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ADDITION_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SUBSTRACTION_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DIVIZION_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MULTIPLICATION_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.POWER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MODULO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RADICAL_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGARITHM_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MIN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MAX_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BIGGER_THAN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SMALLER_THAN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SMALLER_OR_EQUAL_THAN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BIGGER_OR_EQUAL_THAN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DAY_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MONTH_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.YEAR_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ROUND_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ROUND_UP_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ROUND_DOWN_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.HP_OF_ENTITY_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MAX_HP_OF_ENTITY_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.OPPOSITE_TRANSFER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DEGREES_TO_RADIANS_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RADIANS_TO_DEGREES_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TO_NBT_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NBT_TO_PROPERTY_NUMBER_CLODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TRANSFER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TELEPORTER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REDSTONE_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_TO_REDSTONE_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_TO_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_TO_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ENERGY_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FLUID_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.NUMBER_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.ITEM_NBT_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_TO_ITEM_NBT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGIC_CLICKING_SWITCHING_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.AND_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.OR_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.XOR_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NAND_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NOR_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.XNOR_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.OPPOSITE_TRANSFER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NBT_TO_PROPERTY_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TO_NBT_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TRANSFER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TELEPORTER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REDSTONE_TO_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGIC_TO_REDSTONE_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGIC_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.LOGIC_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.ITEM_NBT_TO_LOGIC_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOGIC_TO_ITEM_NBT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MESSAGER_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TITLE_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.COMMAND_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MERGE_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LOWERCASE_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UPPERCASE_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NBT_TO_PROPERTY_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TO_NBT_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.PROPERTY_TRANSFER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TELEPORTER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TEXT_TO_NUMBER_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LENGTH_OF_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TEXT_TO_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.TEXT_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.ITEM_NBT_TO_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TEXT_TO_ITEM_NBT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RANDOM_ITEM_FROM_TAG_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IS_ITEM_IN_ITEM_TAG_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IS_BLOCK_IN_BLOCK_TAG_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TELEPORTER_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NUMBER_OF_ITEMS_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.MAX_STACK_OF_ITEMS_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ITEM_TO_TEXT_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NAME_OF_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.ITEM_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.ITEM_INVENTORY_TO_ITEM_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ITEM_TO_ITEM_INVENTORY_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RANDOMIZER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.OPPOSITE_TRANSFER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ROTATE_CLOCKWISE_TRANSFER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.ROTATE_COUNTERCLOCKWISE_TRANSFER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.EQUAL_AXIS_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.UNEQUAL_AXIS_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.IMITATOR_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TELEPORTER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.FILLER_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.REDSTONE_TO_DIRECTION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DIRECTION_TO_REDSTONE_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DIRECTION_TO_AXIS_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.DIRECTION_TO_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModItems.DIRECTION_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.BLOCK_FROM_POSITION_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.POSITIONS_TO_AREA_CODE_BLOCKS.get().asItem());
				tabData.accept(PuzzleCodeModItems.POSITION_CODE_ITEM.get());
				tabData.accept(PuzzleCodeModBlocks.AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_AREA_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.NEUTRAL_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.SURVIVAL_NEUTRAL_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.CHAIN_NEUTRAL_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.TRANSFER_NEUTRAL_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.LEFT_TRANSFER_NEUTRAL_CODE_BLOCK.get().asItem());
				tabData.accept(PuzzleCodeModBlocks.RIGHT_TRANSFER_NEUTRAL_CODE_BLOCK.get().asItem());
			}).withSearchBar().build());
}
